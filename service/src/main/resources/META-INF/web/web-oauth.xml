<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                  http://www.springframework.org/schema/security
                  http://www.springframework.org/schema/security/spring-security-4.0.xsd 
                  http://www.springframework.org/schema/security/oauth2 
                  http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd 
                  http://www.springframework.org/schema/mvc 
                  http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
		
		<!-- TokenStore, 使用JdbcTokenStore, 将token信息存放数据库, 需要提供一个dataSource对象; 也可使用InMemoryTokenStore存于内存中 -->
		<!--<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>-->  
		<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">  
		    <beans:constructor-arg index="0" ref="dataSource"/>
		</beans:bean> 
		<beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">  
		    <beans:property name="tokenStore" ref="tokenStore"/>  
		    <beans:property name="supportRefreshToken" value="true"/>  
		</beans:bean>
		<beans:bean id="clientDetailsService" class="com.codingera.module.oauth2.service.CustomJdbcClientDetailsService">
			<!-- <beans:bean id="clientDetailsService" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">   -->
		    <beans:constructor-arg index="0" ref="dataSource"/>  
		</beans:bean>
		<!-- 实现了Spring security中 UserDetailsService 接口 -->
		<beans:bean id="oauth2ClientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">  
		    <beans:constructor-arg ref="clientDetailsService"/>  
		</beans:bean>
		<beans:bean id="oauth2AuthenticationEntryPoint"  
            class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
            
    <!-- BEGIN AuthenticationManager -->
        <authentication-manager id="oauth2AuthenticationManager">  
		    <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>  
		</authentication-manager>
		<!-- <authentication-manager alias="authenticationManager">  
		    <authentication-provider user-service-ref="UserService">  
		        <password-encoder hash="md5"/>  
		    </authentication-provider>  
		</authentication-manager> --> 
    <!-- END AuthenticationManager -->
		
    <!-- BEGIN Handler -->
		<!-- 实现AccessDeniedHandler接口 -->
		<beans:bean id="oauth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
		</beans:bean>
        <!-- UserApprovalHandler配置, 这儿使用DefaultUserApprovalHandler, 这里是实现client是否可信任的关键点,可以扩展该接口来自定义approval行为 -->
		<beans:bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">  
		</beans:bean>
    <!-- END Handler -->
		
	<!-- BEGIN Server -->
		<!-- 核心:认证服务 -->
		<oauth2:authorization-server 
			client-details-service-ref="clientDetailsService" 
			token-services-ref="tokenServices" 
			user-approval-handler-ref="oauthUserApprovalHandler">  
			    <oauth2:authorization-code/>  
			    <oauth2:implicit/>  
			    <oauth2:refresh-token/>  
			    <oauth2:client-credentials/>  
			    <oauth2:password/>  
		</oauth2:authorization-server>
		<!-- 资源服务 -->
		<!-- 注意: 每个resource-id的值必须在对应的ClientDetails中resourceIds值中存在 -->
		<!--unity resource server filter-->  
		<oauth2:resource-server id="unityResourceServer" resource-id="unity-resource" token-services-ref="tokenServices"/>  
		<!--mobile resource server filter-->  
		<oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices"/>
		<!--codingera api resource server filter-->  
		<oauth2:resource-server id="apiResourceServer" resource-id="api-resource" token-services-ref="tokenServices"/>
	<!-- END Server -->
		
		<!-- 在默认的Spring Security AccessDecisionManager的基础上添加了ScopeVoter -->
		<beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">  
		    <beans:constructor-arg>  
		        <beans:list>  
		            <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>  
		            <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>  
		            <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>  
		        </beans:list>  
		    </beans:constructor-arg>  
		</beans:bean>
		 
		<!--  ClientCredentialsTokenEndpointFilter配置, 该Filter将作用于Spring Security的chain 链条中 -->
		<beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
			<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
		</beans:bean>
		
	<!-- BEGIN http -->
		<!-- /oauth/token 的http 配置, 用于监听该URL的请求, 核心 -->   
		<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauth2AuthenticationManager"  
		      entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">  
		    <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>  
		    <anonymous enabled="false"/>  
		    <csrf disabled="true"/>
		    <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>  
		    <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>  
		    <access-denied-handler ref="oauth2AccessDeniedHandler"/>  
		</http>
		
		<!-- 针对不同resource的http配置, 由于上面配置了两个resource, 这儿也配置两个 -->
		<!-- 注意每一个http对应不同的resourceServer. access-decison-manager-ref对应Oauth的AccessDecisionManager -->
		<!--unity http configuration-->  
		<http pattern="/unity/**" use-expressions="false" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint" access-decision-manager-ref="oauth2AccessDecisionManager">  
		    <anonymous enabled="false"/>
		    <csrf disabled="true"/>  
		    <intercept-url pattern="/unity/**" access="ROLE_UNITY,SCOPE_READ"/>  
		    <custom-filter ref="unityResourceServer" before="PRE_AUTH_FILTER"/>  
		    <access-denied-handler ref="oauth2AccessDeniedHandler"/>  
		</http>
		<!--mobile http configuration-->  
		<http pattern="/m/**" use-expressions="false" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint" access-decision-manager-ref="oauth2AccessDecisionManager">  
		    <anonymous enabled="false"/>
		    <csrf disabled="true"/>
		    <intercept-url pattern="/m/**" access="ROLE_MOBILE,SCOPE_READ"/>
		    <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>  
		    <access-denied-handler ref="oauth2AccessDeniedHandler"/> 
		</http>
		<!--codingera接口 http configuration-->  
		<http pattern="/api/**" use-expressions="false" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint" access-decision-manager-ref="oauth2AccessDecisionManager">  
		    <anonymous enabled="false"/>
		    <csrf disabled="true"/>
		    <intercept-url pattern="/api/**" access="ROLE_MOBILE,SCOPE_READ"/>
		    <custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER"/>  
		    <access-denied-handler ref="oauth2AccessDeniedHandler"/> 
		</http> 
	<!-- END http -->
		 		
</beans:beans> 



    
    